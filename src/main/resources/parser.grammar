%header%

GRAMMARTYPE = "LL"

DESCRIPTION = "A grammar for a simple arithmetic language."

AUTHOR      = "BAR"
VERSION     = "1.0"
DATE        = "20 February 2022"

LICENSE     = "Permission is granted to copy this document verbatim in any
               medium, provided that this copyright notice is left intact."

COPYRIGHT   = "Copyright (c). All rights reserved."


%tokens%

WHITESPACE     = <<[ \t\n\r]>> %ignore%
ATOM           = <<!?[a-zA-Z_][a-zA-Z0-9_:]*>>
ATTRS_OPEN     = "("
ATTRS_CLOSE    = ")"
TAG_OPEN       = "<"
TAG_CLOSE      = ">"
SINGLE_TAG     = <<[a-zA-Z_][a-zA-Z0-9_]*\.>>
LINE_TAG       = "<-"
SPEC           = <<\.\([a-zA-Z0-9_]+\)>>
ATTR_STR       = <<"[^"]*">>
QUOTE          = <<">>
IS             = "="
BLOCK          = <<\<\<[^>]*\>\>>>

%productions%

//Go = BLOCK [Go] ;
Go = Node [Go];

Attr           = ATOM | ATOM IS ATOM | ATOM IS ATTR_STR;
Attrs          = ATTRS_OPEN Attr+ ATTRS_CLOSE;
Tag            = ATOM Attrs? | SINGLE_TAG;
//Node           = Tag LINE_TAG NodeCont | Tag TAG_OPEN NodeCont? TAG_CLOSE;
Node           = Tag (LINE_TAG NodeCont | TAG_OPEN NodeCont? TAG_CLOSE)?;
NodeCont       = BLOCK | SPEC | Node+;


//Attrs = ATTR_LP Attr {Attr} ATTR_RP ;

//Tag = SNG_TAG | ATOM [Attrs] ;

//BlockCont = (SPEC | ATOM) [BlockCont] ;

//Multiline = BLK_LP BlockCont BLK_RP ;